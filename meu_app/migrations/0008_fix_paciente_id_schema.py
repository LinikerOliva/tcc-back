# Generated by Trae fix to ensure Paciente has independent UUID PK
from django.db import migrations
import uuid

TABLE = 'meu_app_paciente'

def ensure_id_column(apps, schema_editor):
    cursor = schema_editor.connection.cursor()
    try:
        cols = [row[1] for row in cursor.execute(f"PRAGMA table_info('{TABLE}')")]
    except Exception:
        cols = []
    if 'id' not in cols:
        cursor.execute(f"ALTER TABLE {TABLE} ADD COLUMN id TEXT")


def gen_paciente_ids_sql(apps, schema_editor):
    cursor = schema_editor.connection.cursor()
    cursor.execute(f"SELECT user_id, id FROM {TABLE}")
    rows = cursor.fetchall()
    to_update = []
    for user_id, pid in rows:
        if pid is None or pid == '':
            to_update.append((uuid.uuid4().hex, user_id))
    if to_update:
        cursor.executemany(f"UPDATE {TABLE} SET id = ? WHERE user_id = ?", to_update)


def recreate_with_id_pk(apps, schema_editor):
    conn = schema_editor.connection
    cursor = conn.cursor()

    info = list(cursor.execute(f"PRAGMA table_info('{TABLE}')"))
    col_names = [c[1] for c in info]
    if 'id' in col_names:
        for c in info:
            if c[1] == 'id' and c[5] == 1:  # already PK
                return

    columns = [(c[1], c[2], c[3]) for c in info]  # (name, type, notnull)

    def col_def(name, typ, notnull):
        if name == 'user_id':
            return f"{name} {typ or 'TEXT'}"
        nn = ' NOT NULL' if notnull else ''
        return f"{name} {typ or 'TEXT'}{nn}"

    existing_cols = [c for c in columns if c[0] != 'id']

    ddl_cols = ["id TEXT PRIMARY KEY"] + [col_def(name, typ, notnull) for name, typ, notnull in existing_cols]

    unique_user = ", UNIQUE(user_id)" if any(name == 'user_id' for name, _, _ in existing_cols) else ''

    cursor.execute("PRAGMA foreign_keys=OFF")
    try:
        cursor.execute(f"CREATE TABLE {TABLE}__new ({', '.join(ddl_cols)}{unique_user})")
        src_cols = ['id'] + [name for name, _, _ in existing_cols]
        col_list = ', '.join(src_cols)
        cursor.execute(f"INSERT INTO {TABLE}__new ({col_list}) SELECT {col_list} FROM {TABLE}")
        cursor.execute(f"DROP TABLE {TABLE}")
        cursor.execute(f"ALTER TABLE {TABLE}__new RENAME TO {TABLE}")
    finally:
        cursor.execute("PRAGMA foreign_keys=ON")


class Migration(migrations.Migration):
    dependencies = [
        ('meu_app', '0007_paciente_cpf_paciente_id_alter_paciente_user'),
    ]

    operations = [
        migrations.RunPython(ensure_id_column, migrations.RunPython.noop),
        migrations.RunPython(gen_paciente_ids_sql, migrations.RunPython.noop),
        migrations.RunPython(recreate_with_id_pk, migrations.RunPython.noop),
    ]